(* UI for the Web debugger. *)
(* :exemplar: ide debugging *)
class Debugging usingPlatform: platform ide: ide = (
	|
	private List = platform collections List.

	private JSObject = [platform js global at: 'Object'] on: Exception do: [:e | nil].

	private Color = platform graphics Color.

	private ObjectMirror = platform mirrors ObjectMirror.

	private Gradient = platform hopscotch Gradient.
	private Subject = platform hopscotch Subject.
	private TextEditorFragment = platform hopscotch TextEditorFragment.

	private EvaluationPresenter = ide browsing EvaluationPresenter.
	private ProgrammingPresenter = ide browsing ProgrammingPresenter.
	private SlotSubject = ide browsing SlotSubject.

	private ide = ide.
	|
) (
class ActivationPresenter onSubject: s <ThreadSubject> = ProgrammingPresenter onSubject: s (
	|
	slots <PresenterList>
	editor <CodeMirrorFragment>
	|
) (
actionsMenu = (
	^menuWithLabelsAndActions: {
		{'Inspect Mirror'. [respondToInspectMirror]}.
		{'Inspect Presenter'. [respondToInspectPresenter]}.
	}
)
public collapse = (
	substance collapse.
)
computeSlotPresenters = (
	| presenters = List new. |
	subject slotsDo:
		[:slot <LocalSubject> | presenters add: slot presenter].
	^presenters
)
definition ^<Fragment> = (
	^collapsed: [definitionForHeader] expanded: [column: {
		definitionForHeader.
		definitionForControls.
		(row: {
			definitionForSource width: 0 elasticity: 1.6 asFloat.
			smallBlank.
			definitionForState width: 0 elasticity: 1.
		}) crossAxisAlignToStart.
	}]
)
definitionForControls = (
	^row: {
		button: 'Into' action: [respondToStepInto].
		smallBlank.
		button: 'Into Closure' action: [respondToStepIntoClosure].
		smallBlank.
		button: 'Over' action: [respondToStepOver].
		smallBlank.
		button: 'Out' action: [respondToStepOut].
		smallBlank.
		button: '^self' action: [respondToReturnSelf].
		smallBlank.
		button: '^nil' action: [respondToReturnNil].
		smallBlank.
		button: '^false' action: [respondToReturnFalse].
		smallBlank.
		button: '^true' action: [respondToReturnTrue].
		filler.
		button: 'Restart' action: [respondToRestart].
		smallBlank.
	}
)
definitionForHeader = (
	| qualification |
	qualification:: subject receiverMixin = subject methodMixin
		ifTrue:
			[{}]
		ifFalse:
			[{
				(label: ' ( ')
					color: tertiaryTextColor.
				(link: subject methodMixin name action: [browseMixinMirror: subject methodMixin])
					color: secondaryTextColor.
				(label: ' )')
					color: tertiaryTextColor.
			}].

	^row: {
		(link: subject name action: [substance toggle])
			color: actionLinkColor.
		(label: ' in ')
			color: tertiaryTextColor.
		(link: subject receiverMixin name action: [browseMixinMirror: subject receiverMixin])
			color: secondaryTextColor.
	} , qualification , {
		filler.
		referencesMenu: [methodReferencesMenu].
		smallBlank.
		dropDownMenu: [actionsMenu].
	}
)
definitionForSource = (
	editor:: codeMirror: subject source.
	highlightSourceRange.
	editor acceptResponse: [:editor :event | respondToSourceAccept: editor].
	^editor
)
definitionForState = (
	^column: {
		EvaluationPresenter onSubject: subject.
		slots:: list: computeSlotPresenters.
	}
)
public expand = (
	substance expand.
)
highlightSourceRange = (
	| source range style |
	source:: subject source.
	nil = source ifTrue: [editor text: '<no source>'. ^self].
	editor text: source.
	range:: subject sourceRange.
	nil = range ifTrue: [^self].
	nil = JSObject ifTrue: [^self].
	style:: JSObject new.
	style at: 'css' put: 'color:blue; font-weight:bold; text-decoration: underline'.
	editor style: style from: range start to: range stop.
)
methodReferencesMenu = (
	^menuWithLabelsAndActions:
		(subject messages collect:
			[:selector | { selector. [navigateToSelector: selector] }])
)
public refresh = (
	nil = slots ifFalse:
		[slots setPresenters: computeSlotPresenters].
	nil = editor ifFalse:
		[highlightSourceRange].
)
refreshThreadPresenter = (
	| ancestor ::= parent. |
	[nil = ancestor] whileFalse:
		[ancestor isKindOfThreadPresenter ifTrue:
			[^ancestor refresh].
		 ancestor:: ancestor parent].
)
respondToInspectMirror = (
	inspectObject: subject activationMirror.
)
respondToRestart = (
	subject restart.
	refreshThreadPresenter.
)
respondToReturnFalse = (
	subject returnFalse.
	refreshThreadPresenter.
)
respondToReturnNil = (
	subject returnNil.
	refreshThreadPresenter.
)
respondToReturnSelf = (
	subject returnSelf.
	refreshThreadPresenter.
)
respondToReturnTrue = (
	subject returnTrue.
	refreshThreadPresenter.
)
respondToSourceAccept: editor <CodeMirrorFragment> = (
	subject
		installNewSource: editor textBeingAccepted
		ifSuccess: [editor leaveEditState]
		ifFailure: [:msg | msg out].
	refreshThreadPresenter.
)
respondToStepInto = (
	subject stepInto.
	refreshThreadPresenter.
)
respondToStepIntoClosure = (
	subject stepThrough.
	refreshThreadPresenter.
)
respondToStepOut = (
	subject stepOut.
	refreshThreadPresenter.
)
respondToStepOver = (
	subject stepOver.
	refreshThreadPresenter.
)
) : (
)
class ActivationSubject onModel: m <ActivationMirror> in: t <ThreadSubject> = Subject onModel: m (
|
	protected threadSubject <ThreadSubject> = t.
|
) (
public = other <Object> ^<Boolean> = (
	other isKindOfActivationSubject ifFalse: [^false].
	^activationMirror = other activationMirror
)
public activationMirror ^<ActivationMirror> = (
	^model
)
public className = (
	^nil
)
public createPresenter = (
	^ActivationPresenter onSubject: self
)
public evaluate: expression <String> suspended: suspended <Boolean> ^<ThreadMirror> = (
	| thread |
	thread:: model evaluateSuspended: expression with: ide theWorkspaceManager evaluationScope.
	suspended ifFalse: [thread resume].
	^thread
)
public homeMirror ^<ActivationMirror> = (
	| result ::= model. |
	[nil = result closure] whileFalse: [result:: result enclosingActivation].
	^result
)
public installNewSource: newSource <String> ifSuccess: onSuccess <[]> ifFailure: onFailure <[:String]> = (
	| home builder newMethod |
	(threadSubject includesActivation: model) ifFalse:
		[^onFailure value: 'Activation is not in thread'].
	home:: homeMirror.
	(threadSubject includesActivation: home) ifFalse:
		[^onFailure value: 'Closure''s method is not in thread'].
	builder:: model method definingMixin asBuilder.
	[newMethod:: builder methods addFromSource: newSource]
		on: Exception
		do: [:compileError | ^onFailure value: compileError printString].
	newMethod name = model method name ifFalse:
		[^onFailure value: 'Selector changed'].
	builder declaration install.
	[home restartWithLookup]
		on: Exception
		do: [:restartError | ^onFailure value: restartError printString].
	^onSuccess value
)
public isKindOfActivationSubject ^<Boolean> = (
	^true
)
public messages = (
	^List new
		addAll: ((methodMirror metadata collect: [:ea | ea tag]) reject: [:ea | nil = ea]);
		addAll: methodMirror selectors;
		sort: [:a :b | lexicallyLessOrEqual: a than: b];
		addFirst: methodMirror name;
		yourself
)
public methodMirror ^<MethodMirror> = (
	^activationMirror method
)
public methodMixin ^<MixinMirror> = (
	^model method definingMixin
)
public name ^<String> = (
	| n enclosing |
	n:: model method name.
	enclosing:: model enclosingActivation.
	[nil = enclosing] whileFalse:
		[n:: '[] in ', n.
		 enclosing:: enclosing enclosingActivation].
	^n
)
public receiverMixin ^<MixinMirror> = (
	^model receiver getClass mixin
)
public restart = (
	model restart.
)
public returnFalse = (
	model return: (ObjectMirror reflecting: false).
)
public returnNil = (
	model return: (ObjectMirror reflecting: nil).
)
public returnSelf = (
	model return: model receiver.
)
public returnTrue = (
	model return: (ObjectMirror reflecting: true).
)
public slotsDo: action <[:SlotSubject]> = (
	action value: (SlotSubject name: 'self' value: model receiver).
	model slots do:
		[:local | action value: (SlotSubject name: local name value: local value)].
	model operands do:
		[:value | action value: (SlotSubject name: '' value: value)].
)
public source ^<String> = (
	| s = model method source. |
	nil = s ifTrue: [^'<source unavailable>'].
	^s
)
public sourceRange ^<Interval> = (
	^model sourceRange
)
public stepInto = (
	model stepInto.
)
public stepOut = (
	model stepOut.
)
public stepOver = (
	model stepOver.
)
public stepThrough = (
	model stepThrough.
)
public title ^<String> = (
	^name , ' in ' , receiverMixin name , '(', methodMixin name , ')'.
)
) : (
)
class ThreadPresenter onSubject: s <ThreadSubject> = ProgrammingPresenter onSubject: s (
	|
	activations <PresenterList>
	|
) (
actionsMenu = (
	^menuWithLabelsAndActions: {
		{'Inspect Mirror'. [respondToInspectMirror]}.
		{'Inspect Presenter'. [respondToInspectPresenter]}.
	}
)
definition = (
	^holder: [column: {
		definitionForHeading.
		smallBlank.
		definitionForResult.
		definitionForActivations.
	}]
)
definitionForActivations = (
	subject canResume ifFalse: [^nothing].
	^column: {
		minorHeadingBlock: (row: {
			label: 'Activations'.
			filler.
			expandButtonWithAction: [respondToExpandAll].
			blank: 3.
			collapseButtonWithAction: [respondToCollapseAll].
		}).
		smallBlank.
		activations:: list: (subject refreshActivationChain collect: [:s | s presenter]).
		largeBlank.
	}
)
definitionForHeading = (
	^mainHeadingBlock: (column: {
		row: {
			(label: 'Thread: ', subject stateName) color: Color white.
			filler.
			dropDownMenu: [actionsMenu].
		}.
		mediumBlank.
		row: {
			filler.
			(button: 'Continue' action: [respondToContinue]) enabled: subject canResume.
			largeBlank.
			(button: 'Terminate' action: [respondToTerminate]) enabled: subject canResume.
			filler.
		}.
	})
)
definitionForResult = (
	| result = subject resultAsSlot. |
	nil = result ifTrue: [^nothing].
	^result presenter
)
failureHeadingColor = (
	^Gradient from: (Color h: 0 s: 0.5 v: 0.8) to: (Color h: 0 s: 0.5 v: 0.6)
)
public isKindOfThreadPresenter ^<Boolean> = (
	^true
)
mainHeadingBlock: body = (
	^(padded: body with: {10. 10. 10. 10.})
		color: (subject isFulfilled ifTrue: [successHeadingColor] ifFalse: [failureHeadingColor])
)
public refresh = (
	substance refresh.
	activations setPresenters: (subject refreshActivationChain collect: [:s | s presenter refresh]).
	activations presenters do: [:first | ^first expand].
)
respondToCollapseAll = (
	activations presenters do: [:activation <ActivationPresenter> | activation collapse].
)
respondToContinue = (
	subject resume.
	refresh.
)
respondToExpandAll = (
	activations presenters do: [:activation <ActivationPresenter> | activation expand].
)
respondToInspectMirror = (
	inspectObject: subject threadMirror.
)
respondToTerminate = (
	subject terminate.
	refresh.
)
successHeadingColor = (
	^Gradient from: (Color h: 120 s: 0.5 v: 0.7) to: (Color h: 120 s: 0.5 v: 0.5)
)
) : (
)
public class ThreadSubject onModel: m <ThreadMirror> = Subject onModel: m (
	|
	protected storedActivations <List[ActivationSubject]> ::= List new.
	|
) (
public = other <Object> ^<Boolean> = (
	other isKindOfThreadSubject ifFalse: [^false].
	^model = other model
)
public canResume = (
	^(nil = model suspendedActivation) not
)
public createPresenter = (
	^ThreadPresenter onSubject: self
)
public includesActivation: activation <ActivationMirror> = (
	| a |
	a:: threadMirror suspendedActivation.
	[nil = a] whileFalse:
		[a = activation ifTrue: [^true].
		 a:: a sender].
	^false
)
public isBroken = (
	^model isBroken
)
public isFulfilled = (
	^model isFulfilled
)
public isKindOfThreadSubject ^<Boolean> = (
	^true
)
public isSuspended = (
	^model isSuspended
)
public refreshActivationChain ^<List[ActivationSubject]> = (
	| oldActivations newActivations activation overlapSize |

	oldActivations:: storedActivations.
	newActivations:: List new.
	activation:: model suspendedActivation.
	[nil = activation] whileFalse:
		[newActivations add: (ActivationSubject onModel: activation in: self).
		 activation:: activation sender].

	replaceCommonSuffixFrom: oldActivations to: newActivations.

	^storedActivations:: newActivations.
)
replaceCommonSuffixFrom: oldList to: newList = (
	0 to: (newList size min: oldList size) - 1 do: [:offset |
		|
		newIndex = newList size - offset.
		oldIndex = oldList size - offset.
		|
		(oldList at: oldIndex) = (newList at: newIndex)
			ifTrue: [newList at: newIndex put: (oldList at: oldIndex)]
			ifFalse: [^self]].
)
public resultAsSlot ^<ObjectSubject> = (
	| r <ObjectMIrror> = model result. |
	nil = r ifTrue: [^nil].
	^SlotSubject name: 'result' value: r
)
public resume = (
	model resume.
)
public stateName ^<String> = (
	model isFulfilled ifTrue: [^'Fulfilled'].
	model isBroken ifTrue: [^'Broken'].
	model isSuspended ifTrue: [^'Suspended'].
	model isTerminated ifTrue: [^'Terminated'].
	^'Unknown'
)
public terminate = (
	model terminate.
)
public threadMirror ^<ThreadMirror> = (
	^model
)
) : (
)
lexicallyLessOrEqual: a <String> than: b <String> ^<Boolean> = (
	1 to: (a size min: b size) do:
		[:index |
		 (a at: index) < (b at: index) ifTrue: [^true].
		 (a at: index) > (b at: index) ifTrue: [^false]].
	^a size <= b size
)
) : (
)
