(* Hopscotch UI for unit testing using Minitest. *)
(* :exemplar: ide minitestUI *)
class MinitestUI usingPlatform: platform minitest: minitest ide: ide = (
	|
	private List = platform collections List.
	private Map = platform collections Map.
	private Promise = platform actors Promise.
	private Color = platform graphics Color.
	private Gradient = platform hopscotch Gradient.
	private Presenter = platform hopscotch Presenter.
	private Subject = platform hopscotch Subject.

	private TestCatalog = minitest TestCatalog.

	private AssortedMethodsPresenter = ide browsing AssortedMethodsPresenter.
	private MethodSubject = ide browsing MethodSubject.
	private ProgrammingPresenter = ide browsing ProgrammingPresenter.

	private ide = ide.
	private platform = platform.
	private minitest = minitest.
	|
) (
(* A presenter for a list of TestResults, such as a list of successes or failures of a test run. *)
class TestResultListPresenter onSubject: s = AssortedMethodsPresenter onSubject: s (
) (
public collapseAll = (
  respondToCollapse: content presenters
)
contentPresenters ^ <Collection[Presenter]> = (
	| sortedTestResults |
	sortedTestResults:: subject results (* asSortedList:
		[:a :b | a testCase selector < b testCase selector] *).
	^sortedTestResults collect:
		[:each <TestResult> |
		(TestResultPresenter onSubject: (TestResultSubject onModel: each)) showIndicatorBar: false]
)
public expandAll = (
  respondToExpand: content presenters.
)
runAll = (
	sendUp respondToRunAll: content presenters
)
) : (
)
(* The subject of a list of test results, such as a list of successes or failures of a test run. The model is a list of TestResult instances. *)
class TestResultListSubject onModel: list = Subject onModel: list (
) (
public createPresenter = (
	^TestResultListPresenter onSubject: self
)
public isEmpty ^ <Boolean> = (
	^model isEmpty
)
public results = (
	^model
)
) : (
)
(* Shows a single TestResult as an expandable selector of the method defining the test. If the result is a failure, also shows the description of the failure. *)
class TestResultPresenter onSubject: s = ProgrammingPresenter onSubject: s (
|
	public showIndicatorBar <Boolean> ::= true.
	methodPresenterSlot <ExpandableMethodPresenter>
|) (
ancestorTestingOutcomePresenter = (
	| ancestor ::= parent. |
	[nil = ancestor] whileFalse:
		[ancestor isKindOfTestingOutcomePresenter ifTrue:
			[^ancestor].
		 ancestor:: ancestor parent].
	^nil
)
public collapse = (
	methodPresenter collapse
)
definition ^ <Fragment> = (
	^showIndicatorBar
		ifTrue: [row: {indicatorBar. elastic:: resultColumn}]
		ifFalse: [resultColumn]
)
exceptionFragment ^ <Fragment> = (
	| link |
	link::
		(link: subject exception printString
		action: [ancestorTestingOutcomePresenter runWithNoExceptionHandling: subject testCase])
			color: footnoteColor.
	^row: {
		blank: 12.
		elastic: link.
		}
)
public expand = (
	methodPresenter expand
)
failureFragment ^ <Fragment> = (
	^row: {
		blank: 12.
		(link: subject failureDescription
		action: [ancestorTestingOutcomePresenter runToDebugFailure: subject testCase])
			color: footnoteColor
		}
)
footnoteColor ^ <Color> = (
	^Color gray: 0.7
)
indicatorBar = (
	^(row: {blank: 5} ) color: statusColor.
)
methodPresenter ^ <ExpandableMethodPresenter> = (
	methodPresenterSlot isNil ifTrue: [methodPresenterSlot:: methodPresenterDefinition].
	^methodPresenterSlot
)
methodPresenterDefinition ^ <ExpandableMethodPresenter> = (
	^subject methodSubject createPresenter
		showClassName: true
)
resultColumn ^ <Fragment> = (
	^column: {
		methodPresenter.
		subject isFailure ifTrue: [failureFragment] ifFalse: [nothing].
		subject hasException ifTrue: [exceptionFragment] ifFalse: [nothing].
		(* subject hasNoData ifTrue: [noDataFragment] *)
	}
)
statusColor ^ <Color> = (
	(* subject passed ifTrue: [^Color green].
	subject failed ifTrue: [^Color red].
	subject error ifTrue: [^Color black]. *)
	^Color gray.
)
) : (
)
(* The subject for presenting a single TestResult. *)
class TestResultSubject onModel: m <TestResult> = Subject onModel: m (
) (
public = x <Object> ^ <Boolean> = (
	x class = class ifFalse: [^false].
	^selector = x selector and: [className = x className]
)
classDeclarationMirror = (
	^testCase environment classDeclarationMirror
)
public className = (
	^classDeclarationMirror qualifiedName
)
public exception = (
	(* If the model is a test error, return the exception associated with the result. Otherwise return nil. *)
	^model isError
		ifTrue: [model exception]
		ifFalse: [nil]
)
public failureDescription ^<String> = (
	(* If the model is a failure, return the description of the failure. Otherwise return an empty string. *)
	^isFailure
		ifTrue: [model description]
		ifFalse: ['']
)
public hasException ^<Boolean> = (
	(* True if the test result has an exception associated with it, or in other words, the result is a test error. *)
	^model isError
)
public hash = (
	^selector hash * 37 + className hash
)
public isFailure = (
	^model isFailure
)
public methodSubject = (
	^MethodSubject onModel: (testCase environment classDeclarationMirror instanceSide methods findMirrorNamed: selector)
)
public selector ^ <Symbol> = (
	^testCase selector
)
public testCase = (
	^model testCase
)
) : (
)
(* Presents a Tester in the process of running tests. *)
class TestingInProgressPresenter onSubject: subject = Presenter onSubject: subject (
|
	progressBar
	currentSelector
	errorCountHolder
	failureCountHolder
|) (
definition = (
	schedule: [startTests].

	errorCountHolder:: holder: [nothing].
	failureCountHolder:: holder: [nothing].
	(* progressBar:: progress. *)
	currentSelector:: label: 'no tests yet'.
	^column: {
		(* progressBar. *)
		row: {label: 'Running '. currentSelector . label: '...'}.
		errorCountHolder.
		failureCountHolder.
	}
)
public isTransient = (
	(* Should not be recorded in navigation history. *)
	^true
)
pumpTests = (
	tester atEnd ifTrue:
		[tester haveAllTestsSucceeded ifTrue: [tester cleanUp].
		 enterSubject:: TestingOutcomeSubject tester: tester configClass: subject configClass.
		 ^self].

	currentSelector text: tester peekSelector.
	(failureCountHolder hasVisual and: [tester failures size > 0]) ifTrue:
		[failureCountHolder content: (row: {label: 'Failures: ', tester failures size asString})].
	(errorCountHolder hasVisual and: [tester errors size > 0]) ifTrue:
		[errorCountHolder content: (row: {label: 'Errors: ', tester errors size asString})].

	schedule:
		[Promise when: tester stepAsync fulfilled: [pumpTests]].
)
startTests = (
	tester prepare.
	pumpTests.
)
tester = (
	^subject tester
)
) : (
)
(* Represents a Tester instance, in the process of running tests. *)
public class TestingInProgressSubject tester: tester <Tester> configClass: configClass = Subject onModel: tester (
|
	public configClass = configClass.
|) (
public createPresenter = (
	^TestingInProgressPresenter onSubject: self
)
public refreshmentSubject = (
	^self class tester: model configClass: configClass.
)
public tester = (
	^model
)
public title = (
	^'Running Tests'
)
) : (
public onConfiguration: configClass <Class> platform: platform minitest: minitest = (
	| config modules tester |
	config:: configClass packageTestsUsing: ide namespacing manifest.
	modules:: config testModulesUsingPlatform: platform minitest: minitest.
	tester:: minitest Tester testModules: modules.
	^self tester: tester configClass: configClass.
)
)
(* Shows an outcome of running a suite of tests, as a page with separate sections for errors, failures and successes. *)
class TestingOutcomePresenter onSubject: s <TestingOutcomeSubject> = ProgrammingPresenter onSubject: s (
) (
definition ^ <Fragment> = (
	^column: {
	      headingDefinition.
		blank: 2.
		errors.
		blank: 1.
		failures.
		blank: 1.
		successes.
	}
)
didAllTestsPass = (
	^didNoTestsFail (* not tracking incomplete for now, so no difference from didNoTestsFail *)
)
didNoTestsFail ^ <Boolean> = (
	^subject failures isEmpty and: [subject errors isEmpty]
)
errors ^ <Fragment> = (
	^section: 'Errors'
		with: subject errors
		status: #error
		color: errorsSectionColor
)
errorsSectionColor = (
	^Gradient from: (Color h: 0 s: 0.15 v: 1) to: (Color h: 0 s: 0.15 v: 0.9)
)
failureHeadingColor = (
	^Gradient from: (Color h: 0 s: 0.5 v: 0.8) to: (Color h: 0 s: 0.5 v: 0.6)
)
failures ^ <Fragment> = (
	^section: 'Failures'
		with: subject failures
		status: #failure
		color: failuresSectionColor
)
failuresSectionColor = (
	^Gradient from: (Color h: 50 s: 0.3 v: 1) to: (Color h: 50 s: 0.3 v: 0.9)
)
headingBlock: fragment color: aColor = (
	^(padded: fragment with: {10. 5. 5. 5}) color: aColor
)
headingContentsDefinition ^ <Presenter> = (
	| statusMessage |
	statusMessage::
		didAllTestsPass
			ifTrue: ['Passed']
			ifFalse:
				[didNoTestsFail
					ifTrue: ['Incomplete test results']
					ifFalse: ['Failed ']].
	^row: {
		(link: subject configurationName (* asText allBold *)
			action: [browseClass: subject configClass]) color: Color white.
		smallBlank.
		(label: statusMessage (* asText allBold *)) color: Color white.
		filler.
		button: 'Run Again' action: [respondToRunAgain].
(*		smallBlank.
		button: 'Forget' action: [respondToForget] *)
		}.
)
headingDefinition ^ <Presenter> = (
	^(majorHeadingBlock: headingContentsDefinition)
	color: (
		didNoTestsFail
			ifFalse: [failureHeadingColor]
			ifTrue:
				[successHeadingColor])
)
public isKindOfTestingOutcomePresenter ^<Boolean> = (
	^true
)
public noticeAbandonment = (
	subject tester haveAllTestsSucceeded ifFalse: [subject tester cleanUp].
	super noticeAbandonment.
)
respondToRunAgain = (
	| newSubject |
	subject tester cleanUpResults.
	subject tester haveAllTestsSucceeded ifFalse: [subject tester cleanUp].
	newSubject:: TestingInProgressSubject
		onConfiguration: subject configClass
		platform: platform
		minitest: minitest.
	enterSubject: newSubject.
)
respondToRunAll: testCases = (
(* Run the set of test cases given by testCases.  The UI uses this to re-run just the failures, or errors or successes. However, tests have shared state, which one has to tear down and re-initialize.

Other sections that hold test results should be pointing at different shared state so that they can be re-examined  It doesn't look like things are set up to support this. *)
	halt.
)
public runToDebugFailure: testCase = (
	| thread <ThreadMirror> |
	thread:: platform mirrors ActivationMirror invokeSuspended:
		[subject tester runToDebugFailure: testCase].
	[thread suspendedActivation method name = testCase selector] whileFalse:
		[thread stepInto].
	enterSubject:: ide debugging ThreadSubject onModel: thread.
)
public runWithNoExceptionHandling: testCase = (
	| thread <ThreadMirror> |
	thread:: platform mirrors ActivationMirror invokeSuspended:
		[subject tester runWithNoExceptionHandling: testCase].
	[thread suspendedActivation method name = testCase selector] whileFalse:
		[thread stepInto].
	enterSubject:: ide debugging ThreadSubject onModel: thread.
)
section: label <String> with: testCases <Collection[TestCase]> status: aSymbol <Symbol> color: aColor <Color | Gradient> ^ <Fragment> = (
	| testedMethodsPresenter |
	testedMethodsPresenter:: TestResultListPresenter onSubject: (TestResultListSubject onModel: testCases).
	^column: {
		headingBlock: (row: {
			label: (label, ' (', testCases size printString, ')') (*asText allBold *).
			largeBlank.
			(* (link: 'run all' action: [testedMethodsPresenter runAll]) tinyFont. *)
			filler.
			expandButtonWithAction: [testedMethodsPresenter expandAll].
			blank: 3.
			collapseButtonWithAction: [testedMethodsPresenter collapseAll].
		}) color: aColor.
		blank: 3.
		testedMethodsPresenter.
	}
)
section: label <String> withHidden: testCases <Collection[TestCase]> status: aSymbol <Symbol> color: aColor <Color | Gradient> ^ <Fragment> = (
	| contentHolder testedMethodsPresenter |
	testedMethodsPresenter:: TestResultListPresenter onSubject: (TestResultListSubject onModel: testCases).
	contentHolder:: holder:
		(row: {
			blank: 10.
			testCases isEmpty
				ifTrue: [nothing]
				ifFalse: [(link: 'Show details...' action: [contentHolder content: testedMethodsPresenter]) (*tinyFont*)]
		}).
	^column: {
		headingBlock: (row: {
			label: (label, ' (', testCases size printString, ')') (*asText allBold*).
			largeBlank.
			(* (link: 'run all' action:
				[contentHolder content == testedMethodsPresenter
					ifTrue: [testedMethodsPresenter runAll]
					ifFalse: [respondToRunAll: testCases]
				]) tinyFont. *)
			filler.
			expandButtonWithAction:
				[contentHolder content = testedMethodsPresenter
					ifTrue: [testedMethodsPresenter expandAll]].
			blank: 3.
			collapseButtonWithAction:
				[contentHolder content = testedMethodsPresenter
					ifTrue: [testedMethodsPresenter collapseAll]].
		}) color: aColor.
		blank: 3.
		contentHolder.
	}
)
successHeadingColor = (
	^Gradient from: (Color h: 120 s: 0.5 v: 0.7) to: (Color h: 120 s: 0.5 v: 0.5)
)
successes ^ <Fragment> = (
	^section: 'Successes'
		withHidden: subject successes
		status: #success
		color: successesSectionColor
)
successesSectionColor = (
	^Gradient from: (Color h: 90 s: 0.3 v: 1) to: (Color h: 90 s: 0.3 v: 0.9)
)
) : (
)
class TestingOutcomeSubject tester: tester <Tester> configClass: configClass = Subject onModel: tester (|
	public configClass = configClass.
|) (
public configurationName = (
	^configClass name
)
public createPresenter = (
	^TestingOutcomePresenter onSubject: self
)
public errors = (
	^tester errors
)
public failures = (
	^tester failures
)
public refreshmentSubject = (
	^self class tester: tester configClass: configClass
)
public successes = (
	^tester successes
)
public tester = (
	^model
)
public title = (
	^'Test Results for ', configurationName
)
) : (
)
) : (
)
