(*
Workspaces allow convenient live code evaluation in the Newspeak IDE. They provide access to an IDE namespace,
unconstrained by the scope of a single module.  This module implements workspaces in the IDE. It lacks much of
the functionality of the Newspeak-on-Squeak workspaces due to the impoverishment of the web platform.

This is also very much a work in progress. Because we don't yet support adding classes, we rely on the simple expedient of having a single Workspace class without custom subclasses.

Copyright Google Inc.  2017.
*)
class WorkspaceManager usingPlatform: p <Platform> ide: webIde <HopscotchIDE> = (
|
	(* imports *)
	private Presenter = p hopscotch core Presenter.
	private Subject = p hopscotch core Subject.
	private DefinitionListPresenter = webIde browsing DefinitionListPresenter.
	private ObjectSubject = webIde browsing ObjectSubject.
	private List = p collections List.
	private Map = p collections Map.
	private ObjectMirror = p mirrors ObjectMirror.
	(* module state *)
	private workspaces <Map[Symbol, Workspace]> = List new.
	private retainedPlatform = p.
	private ide = webIde.
	private Root = ide namespacing Root.

	public evaluationScope = Map new at: #_ put: (ObjectMirror reflecting: Workspace new); yourself.
|) (
(* This is the top-level presenter displayed when following the Workspaces link from the home page. It displays a list of WorkspacePresenters on all existing workspaces. *)
class AllWorkspacesPresenter onSubject: s = DefinitionListPresenter onSubject: s (
) (
contentPresenters ^ <Collection[Presenter]> = (
	^subject allWorkspaces collect: [:ws | expandableLineForWorkspace: ws]
)
definition = (
	^column: {
		minorHeadingBlock: (
			row: {
				label: 'Workspaces' (*asText allBold*).
				largeBlank.
				addButtonWithAction: [respondToAddWorkspace].
				filler.
				expandButtonWithAction: [expandAll].
				blank: 3.
				collapseButtonWithAction: [collapseAll].
				blank: 3.
				dropDownMenu: [workspaceListMenu].
				largeBlank.
				homeButton.
				smallBlank.
				refreshButton.
				}
			).
		mediumBlank.
		super definition.
		mediumBlank.
	}
)
expandableLineForWorkspace: ws <Workspace> = (
	| toggle |
	toggle::
		collapsed: [workspaceRowFor: ws]
		expanded: [
			(ObjectSubject onModel: (ObjectMirror reflecting: ws)) presenter]
		initiallyExpanded: workspaces size = 1.
	(*toggle onUserToggled: [toggle requestVisibility].*)
	^toggle
)
presenterRequestsWorkspaceDeletion: workspace <Workspace> = (
	subject deleteWorkspace: workspace.
	refresh.
)
respondToAddWorkspace = (
	subject addWorkspace.
	refresh.
)
respondToDeleteWorkspace: ws <Workspace> = (
	subject deleteWorkspace: ws.
	refresh.
)
workspaceListMenu = (
	^menuWithLabelsAndActions: {
		{'Inspect Presenter' . [respondToInspectPresenter]}
		}
)
workspaceMenuFor: ws <Workspace> = (
	^menuWithLabelsAndActions: {
		{'Delete workspace ', ws class name. [respondToDeleteWorkspace: ws]}
		}
)
workspaceRowFor: ws <Workspace> = (
	^row: {
		link: ws printString
		action: [ | s = ObjectSubject onModel: (ObjectMirror reflecting: ws). |
				enterSubject: s.
	 ].
		filler.
		dropDownMenu: [workspaceMenuFor: ws].
	}
)
) : (
)
(* Subject for the list of all workspaces. It is responsible for creating and deleting workspace classes and instances. *)
public class AllWorkspacesSubject onModel: dontCare = Subject onModel: dontCare (
) (
public = anotherSubject ^<Boolean> = (
	(* All workspace subjects are considered the same so that clicking the Workspaces link on the home page always takes us to the same page instead of multiplying them. *)
	^anotherSubject isKindOfWorkspaceSubject
)
public addWorkspace = (
	| ws <Workspace> |
	ws:: Workspace new.
	(* ws workspaceText: defaultWorkspaceText.*)
	workspaces add: ws.
)
public allWorkspaces ^ <Collection[Workspace]> = (
	(* Ensure there is always a workspace to work with. *)
	workspaces isEmpty ifTrue: [addWorkspace].
	^workspaces
)
public createPresenter ^ <AllWorkspacesPresenter> = (
	^AllWorkspacesPresenter onSubject: self
)
public deleteWorkspace: ws <Workspace> = (
	workspaces remove: ws.
)
public hash ^<Integer> = (
	^self class hash
)
public isKindOfWorkspaceSubject ^ <Boolean> = (
	^true
)
public title ^<String> = (
	^'Workspaces'
)
) : (
public new = (
(* An AllWorkspacesSubject always has its module as its model. This method is a dummy to satisfy the requirements of the Subject class protocol. Hence it doesn't care about the formal parameter  'dontCare'. *)
	^onModel: nil
)
)
(* The superclass of workspaces. *)
public class Workspace = (
|
public workspaceText
|) (
public actors = ( ^platform actors )
public collections = ( ^platform collections )
protected doesNotUnderstand: message = (
	^Root
		at: message selector
		ifAbsent: [super doesNotUnderstand: message]
)
public graphics = ( ^platform graphics )
public hopscotch = ( ^platform hopscotch )
public ide ^ <HopscotchWebIDE> = (
	^outer WorkspaceManager ide
)
public js = ( ^platform js )
public kernel = ( ^platform kernel )
public mirrors = ( ^platform mirrors )
public platform = ( ^retainedPlatform )
) : (
)
defaultWorkspaceText ^ <String> = (
^'(* Workspaces provide access to the system scope,  allowing you to bypass Newspeak''s modularity at development time. You can evaluate the current selection (or the current line if the selection is empty) by pressing [Evaluate]. *)

platform.
ide.

copy: ''Hello, Pasty New World!'' (* Place the argument on the system clipboard. *)'
)
) : (
)
