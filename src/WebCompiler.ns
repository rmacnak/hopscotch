class WebCompiler packageUsing: manifest = (
) (
class Manifest forNamespace: ns = (
	|
	protected namespace = ns.
	|
) (
public allModules = (
	^(namespace values select: [:ea | ea isKindOfBehavior]) asArray
)
protected doesNotUnderstand: message = (
	^namespace at: message selector
)
) : (
)
class Packager usingPlatform: platform = (
	|
	private List = platform collections List.
	private Map = platform collections Map.
	private ClassDeclarationBuilder = platform mirrors ClassDeclarationBuilder.
	private Snapshotter = platform victoryFuel Snapshotter.

	protected namespace = Map new.
	|
) (
assembleRuntime: runtimeName <String> application: appName <String> to: snapshotPath <String> = (
	| runtimeConfig appConfig runtime accessedResources app bytes |
	runtimeConfig:: (namespace at: runtimeName) at: 3.
	appConfig:: (namespace at: appName) at: 3.

	runtime:: runtimeConfig packageRuntimeUsing:
		(RecordingManifest namespace: namespace accessedResources: List new).

	accessedResources:: List new.
	appConfig packageUsing:
		(RecordingManifest namespace: namespace accessedResources: accessedResources).

	app:: Preloader
		resources: (Array withAll: accessedResources)
		applicationConfiguration: appConfig.

	bytes:: Snapshotter new snapshotApp: app withRuntime: runtime keepSource: true.
	writeBytes: bytes toFileNamed: snapshotPath.
)
compileFile: filename = (
	| source builder |
	source:: readFileAsString: filename.
	builder:: ClassDeclarationBuilder fromSource: source.
	^[builder:: ClassDeclarationBuilder fromSource: source.
	  builder install applyToObject reflectee]
		on: Exception
		do: [:ex | describeError: ex path: filename source: source. ex pass].
)
describeError: ex path: path source: source = (
	ex isKindOfParseError
		ifTrue:
			[ | line ::= 1. lastLine ::= 0. column |
			 1 to: ex position do:
				[:index | (source at: index) = 10 (* LF *) ifTrue:
					[line:: line + 1. lastLine:: index]].
			 column:: ex position - lastLine.
			 (* This matches GCC's format, which lets various tools automatically jump to the position. *)
			 (path, ':', line asString, ':', column asString, ': error: ', ex message) out]
		ifFalse:
			[(path, ':0: error: ', ex printString) out].
)
loadResource: path <String> ^<Array> = (
	| from |
	from:: (path lastIndexOf: '/') + 1.

	(path endsWith: '.ns') ifTrue:
		[ | klass = compileFile: path. |
		 ^{klass name. 'obj'. klass}].

	(path endsWith: '.txt') ifTrue:
		[ | name = path copyFrom: from to: path size - 4. |
		 ^{name. 'obj'. readFileAsString: path}].
	(path endsWith: '.bin') ifTrue:
		[ | name = path copyFrom: from to: path size - 4. |
		 ^{name. 'obj'. readFileAsString: path}].

	(path endsWith: '.jpg') ifTrue:
		[ | name = path copyFrom: from to: path size - 4. |
		 ^{name. 'img'. path}].
	(path endsWith: '.gif') ifTrue:
		[ | name = path copyFrom: from to: path size - 4. |
		 ^{name. 'img'. path}].
	(path endsWith: '.png') ifTrue:
		[ | name = path copyFrom: from to: path size - 4. |
		 ^{name. 'img'. path}].
	(path endsWith: '.webp') ifTrue:
		[ | name = path copyFrom: from to: path size - 5. |
		 ^{name. 'img'. path}].
	(path endsWith: '.webm') ifTrue:
		[ | name = path copyFrom: from to: path size - 5. |
		 ^{name. 'img'. path}].

	(path endsWith: '.js') ifTrue:
		[ | name = path copyFrom: from to: path size - 3. |
		 ^{name. 'js'. path}].

	(path endsWith: '.css') ifTrue:
		[ | name = path copyFrom: from to: path size - 4. |
		 ^{name. 'css'. path}].

	Error signal: 'Unknown resource type: ', path
)
public main: args = (
	| index ::= 1. |

	[((args at: index) indexOf: '.') > 0] whileTrue:
		[ | resource |
		 resource:: loadResource: (args at: index).
		 namespace at: (resource at: 1) put: resource.
		 index:: index + 1].

	[(index + 2) <= args size] whileTrue:
		[assembleRuntime: (args at: index) application: (args at: index + 1) to: (args at: index + 2).
		 index:: index + 3].
)
readFileAsBytes: filename = (
	(* :pragma: primitive: 510 *)
	halt.
)
readFileAsString: filename = (
	^String withAll: (readFileAsBytes: filename)
)
writeBytes: bytes toFileNamed: filename = (
	(* :pragma: primitive: 511 *)
	halt.
)
) : (
)
class Preloader resources: r applicationConfiguration: a = (
	|
	protected resources = r.
	protected applicationConfiguration = a.
	|
) (
public main: platform args: args = (
	| Promise pending namespace manifest |
	Promise:: platform actors Promise.
	pending:: 0.
	namespace:: platform collections Map new.
	resources do:
		[:resource | | name type payload promise |
		 name:: resource at: 1.
		 type:: resource at: 2.
		 payload:: resource at: 3.
		 promise:: unpackResourceType: type payload: payload platform: platform.
		 pending:: pending + 1.
		 Promise when: promise fulfilled:
			[:resource |
			 namespace at: name put: resource.
			 pending:: pending - 1.
			 pending = 0 ifTrue:
				[manifest:: Manifest forNamespace: namespace.
				 (applicationConfiguration packageUsing: manifest)
					main: platform args: args]]].
)
unpackResourceType: type payload: payload platform: platform = (
	'obj' = type ifTrue:
		[^payload].
	'img' = type ifTrue:
		[^(platform js global at: 'Image') new at: 'src' put: payload; yourself].
	'js' = type ifTrue:
		[ | resolver document script |
		resolver:: platform actors Resolver new.
		document:: platform js global at: 'document'.
		script:: document createElement: 'script'.
		script at: 'type' put: 'text/javascript'.
		script at: 'src' put: payload.
		script at: 'onload' put: [:e | resolver fulfill: script. nil].
		(document at: 'head') appendChild: script.
		^resolver promise].
	'css' = type ifTrue:
		[ | document script |
		document:: platform js global at: 'document'.
		script:: document createElement: 'link'.
		script at: 'rel' put: 'stylesheet'.
		script at: 'href' put: payload.
		(document at: 'head') appendChild: script.
		^script].

	^Error signal: 'Unknown resource type: ', type
)
) : (
)
class RecordingManifest namespace: ns accessedResources: list = (
	|
	protected namespace = ns.
	protected accessedResources = list.
	|
) (
public allModules = (
	| resources |
	resources:: namespace values select: [:resource | (resource at: 3) isKindOfBehavior].
	accessedResources addAll: resources.
	^(resources collect: [:resource | resource at: 3]) asArray
)
protected doesNotUnderstand: message = (
	| resource = namespace at: message selector. |
	accessedResources add: resource.
	^resource at: 3
)
) : (
)
public main: platform args: args = (
	^(Packager usingPlatform: platform) main: args
)
) : (
)
