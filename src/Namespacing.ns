(* Unlike most languages, Newspeak has no global namespace. The IDE, however, as an extra-linguistic tool does provide a namespace. This namespace is stateless and only contains Values, typically top-level classes or other namespaces. It is used by an application definition in its #packageUsing: to collect the pieces of a program or by a test configuration in #packageTestsUsing:.

Copyright 2008 Cadence Design Systems, Inc.
Copyright 2012 Cadence Design Systems, Inc.
Copyright 2013 Ryan Macnak
Copyright 2013 Google Inc.

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
*)
(* :exemplar: ide namespacing *)
class Namespacing usingPlatform: p ide: ide = (
|
	private ClassMirror = p mirrors ClassMirror.
	private ObjectMirror = p mirrors ObjectMirror.
	private List = p collections List.
	private Map = p collections Map.
	private Set = p collections Set.
	private Subject = p hopscotch Subject.
	private ProgrammingPresenter = ide browsing ProgrammingPresenter.
	private MethodSubject = ide browsing MethodSubject.
	private TransientSlotSubject = ide browsing TransientSlotSubject.
	private ClassHeaderSubject = ide browsing ClassHeaderSubject.

	public Root = p collections Map new.
	public manifest = Manifest forNamespace: Root.

	selectors ::= Map new.
|) (
public class AllMetadataSubject = SelectorSetSubject (
) (
filter: selector <Selector> = (
	^selector taggers isEmpty not
)
public title = ( ^'Metadata' )
) : (
)
public class AllSelectorsSubject = SelectorSetSubject (
) (
filter: selector <Selector> = (
	^selector implementors isEmpty not | selector senders isEmpty not
)
public title = ( ^'Selectors' )
) : (
)
class Manifest forNamespace: ns = (
	|
	private namespace = ns.
	|
) (
protected doesNotUnderstand: message <Message> = (
	^namespace at: message selector
)
) : (
)
(* A mapping between unary selectors and Values. *)
class Namespace = (
|
	protected _dictionary ::= Map new.
|) (
public at: symbol <Symbol> ^<Value> = (
	^_dictionary at: symbol
)
public at: symbol <Symbol> ifAbsent: onAbsent <[Value]> ^<Value> = (
	^_dictionary at: symbol ifAbsent: onAbsent
)
public at: symbol <Symbol> ifAbsentPut: onAbsent <Value> ^<Value> = (
	^_dictionary at: symbol ifAbsentPut: onAbsent
)
public at: symbol <Symbol> put: value <Value> ^<Value> = (
	^_dictionary at: symbol put: value
)
public includesKey: symbol <Symbol> ^<Boolean> = (
	^_dictionary includesKey: symbol
)
public isKindOfNamespace ^ <Boolean> = (
	^true
)
public keys ^ <Collection[Symbol]> = (
	^_dictionary keys
)
public keysAndValuesDo: binaryBlock <[:Symbol :Value]> = (
	_dictionary keysAndValuesDo: binaryBlock
)
public removeAll = (
	_dictionary: Map new.
)
public removeKey: name <Symbol> ^<Value> = (
	^_dictionary removeKey: name
)
public removeKey: name <Symbol> ifAbsent: onAbsent ^<Value> = (
	^_dictionary removeKey: name ifAbsent: onAbsent
)
) : (
)
public class NoImplementorsSubject = SelectorSetSubject (
) (
filter: selector <Selector> = (
	^selector implementors isEmpty & selector senders isEmpty not
)
public title = ( ^'No Implementors' )
) : (
)
public class NoSendersSubject = SelectorSetSubject (
) (
filter: selector <Selector> = (
	^selector senders isEmpty & selector implementors isEmpty not
)
public title = ( ^'No Senders' )
) : (
)
class Selector name: n = (|
	public name = n.
	public senders = Set new.
	public implementors = Set new.
	public taggers = Set new.
|) (
) : (
)
class SelectorPresenter onSubject: s = ProgrammingPresenter onSubject: s (
) (
definition ^<Fragment> = (
	|
	implementors = subject implementors.
	senders = subject senders.
	taggers = subject taggers.
	|
	^column: {
		majorHeadingBlock: (label: subject selector, ' implementors (', implementors size asString, ')').
		mediumBlank.
		list: (implementors collect: [:ea | ea presenter showClassName: true]).
		mediumBlank.
		majorHeadingBlock: (label: subject selector, ' senders (', senders size asString, ')').
		mediumBlank.
		list: (senders collect: [:ea | ea presenter showClassName: true]).
		mediumBlank.
		majorHeadingBlock: (label: subject selector, ' taggers (', taggers size asString, ')').
		mediumBlank.
		list: (taggers collect: [:ea | ea presenter showClassName: true]).
		mediumBlank.
	}
)
) : (
)
class SelectorSetPresenter onSubject: s = ProgrammingPresenter onSubject: s (
) (
definition ^<Fragment> = (
	|
	selectors = subject selectorSubjects sort:
		[:a :b | lexicallyLessOrEqual: a selector than: b selector].
	|
	^column: {
		majorHeadingBlock: (label: subject title, ' (', selectors size asString, ')').
		mediumBlank.
		list:
			(selectors collect:
				[:ea | link: ea selector action: [enterSubject: ea]]).
	}
)
) : (
)
public class SelectorSetSubject = Subject onModel: nil (
) (
public = other ^<Boolean> = (
	other isKindOfSelectorSetSubject ifFalse: [^false].
	^title = other title
)
public createPresenter = (
	^SelectorSetPresenter onSubject: self
)
public hash ^<Boolean> = (
	^class hash
)
public isKindOfSelectorSetSubject ^<Boolean> = (
	^true
)
public selectorSubjects = (
	^(selectors values select: [:ea | filter: ea])
		collect: [:ea | SelectorSubject onModel: ea name].
)
) : (
)
public class SelectorSubject onModel: m = Subject onModel: m (
) (
public = other ^<Boolean> = (
	other isKindOfSelectorSubject ifFalse: [^false].
	^other model = model
)
asSortedSubjects: mirrors = (
	| result = List new. |
	(mirrors asArray sort: [:a :b | mirrorLessOrEqual: a than: b]) do:
		[:ea |
		 ea isKindOfMethodMirror ifTrue:
			[result add: (MethodSubject onModel: ea)].
		 ea isKindOfTransientSlotDeclarationMirror ifTrue:
			[result add: (TransientSlotSubject onModel: ea)].
		 ea isKindOfClassHeaderMirror ifTrue:
			[result add: (ClassHeaderSubject onModel: ea)]].
	^result
)
public createPresenter = (
	^SelectorPresenter onSubject: self
)
public hasNoImplementors ^<Boolean> = (
	^(selectors at: model ifAbsent: [^true]) implementors isEmpty
)
public hasNoSenders ^<Boolean> = (
	^(selectors at: model ifAbsent: [^true]) senders isEmpty
)
public hash ^<Integer> = (
	^model hash
)
public implementors ^<List[Subject]> = (
	^asSortedSubjects: (selectors at: model ifAbsent: [^{}]) implementors
)
public isKindOfSelectorSubject ^<Boolean> = (
	^true
)
public selector ^<String> = (
	^model
)
public senders ^<List[Subject]> = (
	^asSortedSubjects: (selectors at: model ifAbsent: [^{}]) senders
)
public taggers ^<List[Subject]> = (
	^asSortedSubjects: (selectors at: model ifAbsent: [^{}]) taggers
)
public title ^<String> = (
	^'#', model
)
) : (
)
public freshNamespace = (
	^Namespace new
)
public indexClass: klass <Behavior> = (
	indexClassDeclaration: (ClassMirror reflecting: klass) mixin declaration.
)
indexClassDeclaration: klass <ClassDeclarationMirror> = (
	indexClassHeader: klass.
	indexMixin: klass instanceSide.
	indexMixin: klass classSide.
)
indexClassHeader: klass <ClassDeclarationMirror> = (
	| header = klass header. |
	note: header implements: header name.
	note: header implements: header primaryFactorySelector.
	klass instanceSide slots do:
		[:slot |
		 note: header implements: slot name.
		 slot isMutable ifTrue: [note: header implements: slot name, ':']].
	header selectors do: [:s | note: header sends: s].
	note: header hasMetadata: header metadata.
)
indexMethod: method <MethodMirror> = (
	note: method implements: method name.
	method selectors do: [:s | note: method sends: s].
	note: method hasMetadata: method metadata.
)
indexMixin: mixin <MixinMirror> = (
	mixin nestedClasses do: [:c | indexClassDeclaration: c].
	mixin transientSlots do: [:c | indexTransientSlot: c].
	mixin methods do: [:m | indexMethod: m].
)
indexTransientSlot: slot <MethodMirror> = (
	note: slot implements: slot name.
	slot isMutable ifTrue: [note: slot implements: slot name, ':'].
	slot selectors do: [:s | note: slot sends: s].
)
lexicallyLessOrEqual: a <String> than: b <String> ^ <Boolean> = (
	1 to: (a size min: b size) do:
		[:index |
		 (a at: index) < (b at: index) ifTrue: [^true].
		 (a at: index) > (b at: index) ifTrue: [^false]].
	^a size <= b size
)
mirrorLessOrEqual: a than: b = (
	| namesA namesB |
	namesA:: qualifyNameOf: a into: List new.
	namesB:: qualifyNameOf: b into: List new.
	1 to: (namesA size min: namesB size) do:
		[:index | | nameA nameB |
		 (nameA:: namesA at: index) = (nameB:: namesB at: index) ifFalse:
			[^lexicallyLessOrEqual: nameA than: nameB]].
	^namesA size <= namesB size
)
note: methodOrHeader <ClassHeaderMirror | MethodMirror> hasMetadata: metadata <String> = (
	metadata do:
		[:each | each tag = nil ifFalse:
			[(selectors at: each tag ifAbsentPut: [Selector name: each tag])
				taggers add: methodOrHeader]].
)
note: methodOrHeader <ClassHeaderMirror | MethodMirror> implements: selector <String> = (
	(selectors at: selector ifAbsentPut: [Selector name: selector])
		implementors add: methodOrHeader.
)
note: methodOrHeader <ClassHeaderMirror | MethodMirror> sends: selector <String> = (
	(selectors at: selector ifAbsentPut: [Selector name: selector])
		senders add: methodOrHeader.
)
qualifyNameOf: mirror into: names = (
	nil = mirror ifTrue: [^names].
	mirror isKindOfMixinMirror ifTrue:
		[qualifyNameOf: mirror enclosingMixin into: names.
		 names add: mirror name.
		 ^names].
	mirror isKindOfClassHeaderMirror ifTrue:
		[qualifyNameOf: mirror declaration instanceSide into: names.
		 names add: mirror primaryFactorySelector.
		 ^names].
	mirror isKindOfMethodMirror ifTrue:
		[qualifyNameOf: mirror definingMixin into: names.
		 names add: mirror name.
		 ^names].
	mirror isKindOfTransientSlotDeclarationMirror ifTrue:
		[qualifyNameOf: mirror definingMixin into: names.
		 names add: mirror name.
		 ^names].
	unknownKind.
)
public reindex = (
	selectors:: Map new.
	Root do: [:member | member isKindOfBehavior ifTrue: [indexClass: member]].
)
public removeKey: key <Symbol> ^ <Object> = (
	| value <Object> |
	#NAMESPACEBOGUS.
	value:: Root removeKey: key.
	^value
)
) : (
)
